{
    "title": "Optional chaining",
    "postscript": "You can chain as many things as you need. For example, <code>someOptionalArray?.first?.lowercased()<\/code>.",
    "reviewType": "singleSelection",
    "question": "This code is valid Swift \u2013 true or false?",
    "hint": "It might sound obvious, but optional chaining may only be used with optionals.",
    "syntaxHighlighting": true,
    "correct": [
        {
            "answer": "let shoppingList = [\"eggs\", \"tomatoes\", \"grapes\"]\nlet firstItem = shoppingList.first?.appending(\" are on my shopping list\")",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "let favoriteColors = [\"Paul\": \"Red\", \"Charlotte\": \"Pink\"]\nlet charlotteColor = favoriteColors[\"Charlotte\"]?.lowercased()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "func albumReleased(in year: Int) -> String? {\n\tswitch year {\n\tcase 2006: return \"Taylor Swift\"\n\tcase 2008: return \"Fearless\"\n\tcase 2010: return \"Speak Now\"\n\tcase 2012: return \"Red\"\n\tcase 2014: return \"1989\"\n\tcase 2017: return \"Reputation\"\n\tdefault: return nil\n\t}\n}\nlet album = albumReleased(in: 2006)?.uppercased()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "let racers = [\"Hamilton\", \"Verstappen\", \"Vettel\"]\nlet winnerWasVE = racers.first?.hasPrefix(\"Ve\")",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "let capitals = [\"Scotland\": \"Edinburgh\", \"Wales\": \"Cardiff\"]\nlet scottishCapital = capitals[\"Scotland\"]?.uppercased()",
            "reason": "This code is valid Swift."
        },
        {
            "answer": "let songs: [String]? = [String]()\nlet finalSong = songs?.last?.uppercased()",
            "reason": "This code is valid Swift."
        }
    ],
    "wrong": [
        {
            "answer": "func loadForecast(for dayNumber: Int) -> String {\n\tprint(\"Forecast unavailable.\")\n\treturn nil\n}\nlet forecast = loadForecast(for: 3)?.uppercased()",
            "reason": "The <code>loadForecast()<\/code> function does not return an optional string."
        },
        {
            "answer": "let captains: [String]? = [\"Archer\", \"Lorca\", \"Sisko\"]?\nlet lengthOfBestCaptain = captains.last?.count",
            "reason": "The <code>captains<\/code> array is optional, so this should read <code>captains?.last?.count<\/code>."
        },
        {
            "answer": "let credentials = [\"twostraws\", \"fr0sties\"]\nlet lowercaseUsername = credentials.first.lowercased()",
            "reason": "Accessing the <code>first<\/code> property returns an optional, so this should read <code>credentials.first?.lowercased()<\/code>."
        },
        {
            "answer": "let opposites = [\"hot\": \"cold\", \"near\": \"far\"]\nlet oppositeOfLight = opposites[\"light\"].uppercased()",
            "reason": "Accessing a dictionary key is optional, so this should read <code>oposites[\"light\"]?.uppercased()<\/code>."
        },
        {
            "answer": "let names = [\"Taylor\", \"Paul\", \"Adele\"]\nlet lengthOfLast = names.last?.count?",
            "reason": "The <code>count<\/code> property is not optional, so this should read <code>names.last?.count<\/code>."
        },
        {
            "answer": "let attendees: [String] = [String]()\nlet firstInLine = attendees?.first?.uppercased()",
            "reason": "The <code>attendees<\/code> array is not optional, so this should read <code>attendees.first?.uppercased<\/code>."
        }
    ]
}